
Files:

- argus_usescase1.sh
Usage: ./argus_usecase1.sh -n <#requests> -p <certsdir>
       ./argus_usecase1.sh -d <end date > -p <certsdir> (The format must be YYYYMMDDhhmm, returned by date +%Y%m%d%H%M)

This script has been used for a use case test but also for load testing.
It uses 10 test user certificates stored in <certsdir> to issue authorization requests using the pepcli (either a given number of requests or until e certain datetime value).
Each request randomly chooses one of these certificates.
The certificates files must be:
test_user_300_cert.pem
test_user_301_cert.pem
test_user_302_cert.pem
test_user_303_cert.pem
test_user_304_cert.pem
test_user_305_cert.pem
test_user_306_cert.pem
test_user_307_cert.pem
test_user_308_cert.pem
test_user_309_cert.pem

The url of the pepd is hardcoded in the main request call:
(/usr/bin/time --format=%e pepcli --pepd http://vtb-generic-98.cern.ch:8154/authz -c $cert --resourceid "resource_1" --actionid "submit-job" -t 60 -x; echo "exit code: $?") >>res_30${index}.txt 2>>out.txt

For each of the ten users, two files are produced: res_30x.txt (with the output of the pepcli command) and out_30x.txt with the time the request took to get a response.

When all the requests are completed, the script will check the results, and produce an output like this:
[root@vtb-generic-15 argus]# ./argus_usecase1.sh -d 200909051700 -p usercerts
Started on: Fri Sep  4 17:35:01 CEST 2009
The test will end on 200909051700
39940 iterations done
Ended on: Sat Sep  5 17:00:02 CEST 2009
Checking results...
User 300 should be mapped to dteam019: OK
User 301 should be mapped to dteam045: Error. good_mappings=4053, iterations=4054
User 302 should be mapped to dteam041: OK
User 3 should be always banned: OK
User 304 should be mapped to dteam014: OK
User 305 should be mapped to dteam047: OK
User 6 should be always banned: OK
User 307 should be mapped to dteam040: OK
User 308 should be mapped to dteam043: Error. good_mappings=4031, iterations=4032
User 309 should be mapped to dteam001: OK

The results checking is quite rough, it assumes a certain reliability of the server: in case of Permit when expectin a Deny the output file has to be directly viewed, the script will report a wrong result where good_mappings is actually the numbers of errors "expected Deny got Permit".

